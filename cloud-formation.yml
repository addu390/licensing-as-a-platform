Description: "AWS Cloudformation template to create resources required to run tasks on an ECS cluster."
Resources:
    EC2EIP:
        Type: "AWS::EC2::EIP"
        Properties:
            Domain: "vpc"

    EC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Redis access"
            GroupName: "redis-sg-licensing"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup4
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                Description: "Traffic from Fargate cluster"
                FromPort: 6379
                IpProtocol: "tcp"
                ToPort: 6379
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    ElastiCacheSubnetGroup:
        Type: "AWS::ElastiCache::SubnetGroup"
        Properties:
            Description: "Redis subnet group"
            CacheSubnetGroupName: "redis-subnet-licensing"
            SubnetIds:
              - !Ref EC2Subnet3
              - !Ref EC2Subnet

    EC2SecurityGroup2:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "RDS Security Group"
            GroupName: "rds-sg-licensing"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup4
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                Description: "Traffic from Fargate Cluster"
                FromPort: !GetAtt RDSDBInstance.Endpoint.Port
                IpProtocol: "tcp"
                ToPort: !GetAtt RDSDBInstance.Endpoint.Port
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: "Subnet group for RDS"
            DBSubnetGroupName: "rds-subnet-licensing"
            SubnetIds:
              - !Ref EC2Subnet
              - !Ref EC2Subnet3

    ECSCluster:
        Type: "AWS::ECS::Cluster"
        Properties:
            ClusterName: !GetAtt ECSService.Name

    ECSService:
        Type: "AWS::ECS::Service"
        Properties:
            ServiceName: "licensing-cluster"
            Cluster: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/licensing-cluster"
            DesiredCount: 1
            LaunchType: "FARGATE"
            PlatformVersion: "LATEST"
            TaskDefinition: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task-definition/licensing-cluster:5"
            DeploymentConfiguration:
                MaximumPercent: 200
                MinimumHealthyPercent: 100
                DeploymentCircuitBreaker:
                    Enable: false
                    Rollback: false
            Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.amazonaws.com/AWSServiceRoleForECS"
            NetworkConfiguration:
                AwsvpcConfiguration:
                    AssignPublicIp: "ENABLED"
                    SecurityGroups:
                      - !Ref EC2SecurityGroup4
                    Subnets:
                      - !Ref EC2Subnet3
                      - !Ref EC2Subnet
            SchedulingStrategy: "REPLICA"

    RDSDBInstance:
        Type: "AWS::RDS::DBInstance"
        Properties:
            DBInstanceIdentifier: "licensing-rds"
            AllocatedStorage: 20
            DBInstanceClass: "db.t3.micro"
            Engine: "mysql"
            MasterUsername: "admin"
            MasterUserPassword: "REPLACEME"
            PreferredBackupWindow: "04:45-05:15"
            BackupRetentionPeriod: 0
            AvailabilityZone: !GetAtt EC2Subnet.AvailabilityZone
            PreferredMaintenanceWindow: "sat:07:06-sat:07:36"
            MultiAZ: false
            EngineVersion: "8.0.28"
            AutoMinorVersionUpgrade: false
            LicenseModel: "general-public-license"
            PubliclyAccessible: true
            StorageType: "gp2"
            Port: 3306
            StorageEncrypted: false
            CopyTagsToSnapshot: true
            MonitoringInterval: 0
            EnableIAMDatabaseAuthentication: false
            EnablePerformanceInsights: false
            DeletionProtection: false
            DBSubnetGroupName: "rds-subnet-licensing"
            VPCSecurityGroups:
              - "sg-0a07d991ac27eb0f1"
            DBParameterGroupName: "default.mysql8.0"
            OptionGroupName: "default:mysql-8-0"
            CACertificateIdentifier: "rds-ca-2019"

    ElastiCacheCacheCluster:
        Type: "AWS::ElastiCache::CacheCluster"
        Properties:
            CacheNodeType: "cache.t2.micro"
            Engine: "redis"
            EngineVersion: "6.2.5"
            NumCacheNodes: 1
            PreferredAvailabilityZone: !GetAtt EC2Subnet3.AvailabilityZone
            PreferredMaintenanceWindow: "sat:00:00-sat:01:00"
            CacheParameterGroupName: "default.redis6.x"
            CacheSubnetGroupName: "redis-subnet-licensing"
            AutoMinorVersionUpgrade: true
            VpcSecurityGroupIds:
              - !Ref EC2SecurityGroup
            SnapshotRetentionLimit: 0
            SnapshotWindow: "05:00-06:00"
            ClusterName: "licensing-redis"

    S3Bucket:
        Type: "AWS::S3::Bucket"
        Properties:
            BucketName: "licensing-s3"

    EC2VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: "10.0.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            InstanceTenancy: "default"

    EC2Subnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Subnet2.AvailabilityZone
            CidrBlock: "10.0.0.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false

    EC2Subnet2:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !Sub "${AWS::Region}a"
            CidrBlock: "10.0.2.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false

    EC2Subnet3:
        Type: "AWS::EC2::Subnet"
        Properties:
            AvailabilityZone: !GetAtt EC2Instance.AvailabilityZone
            CidrBlock: "10.0.1.0/24"
            VpcId: !Ref EC2VPC
            MapPublicIpOnLaunch: false

    EC2RouteTable:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC

    EC2RouteTable2:
        Type: "AWS::EC2::RouteTable"
        Properties:
            VpcId: !Ref EC2VPC

    EC2SecurityGroup3:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "Load Balancer for Licensing"
            GroupName: "alb-sg-licensing"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                CidrIp: "0.0.0.0/0"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    EC2SecurityGroup4:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: "ec2-sg-licensing"
            GroupName: "ec2-sg-licensing"
            VpcId: !Ref EC2VPC
            SecurityGroupIngress:
              -
                SourceSecurityGroupId: !Ref EC2SecurityGroup3
                SourceSecurityGroupOwnerId: !Ref AWS::AccountId
                Description: "Traffic from Load Balancer"
                FromPort: 80
                IpProtocol: "tcp"
                ToPort: 80
            SecurityGroupEgress:
              -
                CidrIp: "0.0.0.0/0"
                IpProtocol: "-1"

    ElasticLoadBalancingV2TargetGroup:
        Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: "/"
            Port: 80
            Protocol: "HTTP"
            HealthCheckPort: "traffic-port"
            HealthCheckProtocol: "HTTP"
            HealthCheckTimeoutSeconds: 5
            UnhealthyThresholdCount: 2
            TargetType: "ip"
            Matcher:
                HttpCode: "200"
            HealthyThresholdCount: 5
            VpcId: !Ref EC2VPC
            Name: "tg-licensing"
            HealthCheckEnabled: true
            TargetGroupAttributes:
              -
                Key: "stickiness.enabled"
                Value: "false"
              -
                Key: "deregistration_delay.timeout_seconds"
                Value: "300"
              -
                Key: "stickiness.app_cookie.cookie_name"
                Value: ""
              -
                Key: "stickiness.type"
                Value: "lb_cookie"
              -
                Key: "stickiness.lb_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "slow_start.duration_seconds"
                Value: "0"
              -
                Key: "stickiness.app_cookie.duration_seconds"
                Value: "86400"
              -
                Key: "load_balancing.algorithm.type"
                Value: "round_robin"

    EC2VPCDHCPOptionsAssociation:
        Type: "AWS::EC2::VPCDHCPOptionsAssociation"
        Properties:
            DhcpOptionsId: "dopt-f2a39b9a"
            VpcId: !Ref EC2VPC

    EC2VPCGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref EC2InternetGateway
            VpcId: !Ref EC2VPC

    EC2NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            SubnetId: !Ref EC2Subnet
            Tags:
              -
                Key: "Name"
                Value: "licensing-nat"
            AllocationId: !GetAtt EC2EIP.AllocationId

    ElasticLoadBalancingV2LoadBalancer:
        Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
        Properties:
            Name: "licensing-balancer"
            Scheme: "internet-facing"
            Type: "application"
            Subnets:
              - !Ref EC2Subnet2
            SecurityGroups:
              - !Ref EC2SecurityGroup3
            IpAddressType: "ipv4"
            LoadBalancerAttributes:
              -
                Key: "access_logs.s3.enabled"
                Value: "false"
              -
                Key: "idle_timeout.timeout_seconds"
                Value: "60"
              -
                Key: "deletion_protection.enabled"
                Value: "false"
              -
                Key: "routing.http2.enabled"
                Value: "true"
              -
                Key: "routing.http.drop_invalid_header_fields.enabled"
                Value: "false"
              -
                Key: "routing.http.xff_client_port.enabled"
                Value: "false"
              -
                Key: "routing.http.desync_mitigation_mode"
                Value: "defensive"
              -
                Key: "waf.fail_open.enabled"
                Value: "false"
              -
                Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
                Value: "false"

    EC2NetworkInterface:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ELB app/${ElasticLoadBalancingV2LoadBalancer.LoadBalancerName}/866219b730772d0c"
            PrivateIpAddress: "10.0.0.231"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.0.0.231"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup3

    EC2NetworkInterface3:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: "RDSNetworkInterface"
            PrivateIpAddress: "10.0.0.143"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.0.0.143"
                Primary: true
            SubnetId: !Ref EC2Subnet
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup2

    EC2NetworkInterface4:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "ElastiCache ${ElastiCacheCacheCluster}"
            PrivateIpAddress: "10.0.1.116"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.0.1.116"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            GroupSet:
              - !Ref EC2SecurityGroup

    EC2NetworkInterface5:
        Type: "AWS::EC2::NetworkInterface"
        Properties:
            Description: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:attachment/53fc3989-0ee6-45fc-af18-27a5977db1ff"
            PrivateIpAddress: "10.0.1.168"
            PrivateIpAddresses:
              -
                PrivateIpAddress: "10.0.1.168"
                Primary: true
            SubnetId: !Ref EC2Subnet3
            SourceDestCheck: true
            Tags:
              -
                Key: "aws:ecs:serviceName"
                Value: !Ref ECSCluster
              -
                Key: "aws:ecs:clusterName"
                Value: !Ref ECSCluster
            GroupSet:
              - !Ref EC2SecurityGroup4

    EC2SubnetRouteTableAssociation:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet3

    EC2SubnetRouteTableAssociation2:
        Type: "AWS::EC2::SubnetRouteTableAssociation"
        Properties:
            RouteTableId: !Ref EC2RouteTable
            SubnetId: !Ref EC2Subnet

    SecretsManagerSecret:
        Type: "AWS::SecretsManager::Secret"
        Properties:
            Name: "prod/licensing"
            Description: "Secret keys for Licensing service"
            SecretString: !Sub |
                {
                    DEBUG=True
                    DATABASE_NAME=licensing
                    DATABASE_USER=
                    DATABASE_PASSWORD=
                    HOST_ENDPOINT=
                    REDIS_LOCATION=
                    AWS_STORAGE_BUCKET_NAME=${S3Bucket}
                    AWS_REGION=${AWS::Region}
                }